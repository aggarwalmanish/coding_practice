Properties of Trees:

For a binary tree:
at root, level is 0 and height is 1
at children of root, level is 1 and height is 2
and so on

1. Max no. of nodes at any level 'n' of binary tree is 2^n
2. Max no. of nodes in a binary tree of height 'h' is ((2^h) - 1)
3. In a binary tree with N nodes, min. possible height or max no. of levels is (log(N+1) at base 2)


Types of Trees:
1. Full Binary Tree : All nodes have 2 children except leaf nodes
2. Complete Binary Tree : A Binary Tree is a complete Binary Tree if all the levels are completely filled 
                            except possibly the last level and the last level has all keys as left as possible.
                            Example : Binary Heap
3. Perfect Binary Tree : A Binary tree is a Perfect Binary Tree in which all the internal nodes have two 
                            children and all leaf nodes are at the same level. 
4. Balanced Binary Tree : If height of tree is O(log n) where n is no. of nodes. Example: AVL Trees
                            These types of trees are performance wise good as time of search, insert and delete
                            is O(log n)
5. A degenerate tree : A tree where every internal node has only one child. Such trees are performance wise same 
                            as linked list


BFS vs DFS: (both use O(n) time )

BFS is Level Order Traversal which can be done in 2 ways:
    1. Using queue and adding root, then its left and right, then traversing so on
    2. Using 2 function, where one defines the level at which we are and the other does all the work that needs to be done at a given level

In BFS, Space required is O(w) where w is max width of Binary Tree because queue stores elements on width basis.


DFS is in 3 ways:
    1. Inorder Traversal (Left, Root, Right)
    2. Preorder Traversal (Root, Left, Right)
    3. Postorder Traversal (Left, Right, Root)

In DFS, Space required is O(h) where h is max. height of Binary Tree as Stack (function call stack)
stores all ancestores of node  


Tree Traversal (using DFS):
General -> T(n) = T(k) + T(n-k-1) + c
here, n is total no. of nodes in tree, k is no. of nodes of one side 
of root and (n-k-1) is no. of nodes on other side of root. and c is some constant time


Case 1: For Skewed Tree (one side is empty and other side is non-empty)
so, k = 0 in this Case
T(n) = T(0) + T(n-1) + c
T(n) = 2*T(0) + T(n-2) + 2c
.
.

T(n) = (n-1)*T(0) + T(1) + (n-1)*c
T(n) = n*T(0) + n*c
so, T(n) = O(n) -> theta of n

Case 2: Both left and right subtrees have equal no. of nodes
T(n) = 2*T(n/2) + c

Auxiliary Space : If we don't consider size of stack for function calls 
then O(1) otherwise O(n)

